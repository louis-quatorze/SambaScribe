generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String?            @unique
  emailVerified      DateTime?
  image              String?
  hashedPassword     String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  login              String?
  role               UserRole           @default(user)
  isAdmin            Boolean            @default(false)
  hasPaidAccess      Boolean            @default(false)
  subscriptionType   SubscriptionType?
  subscriptionStatus SubscriptionStatus?
  accounts           Account[]
  sessions           Session[]
  stripeCustomer     StripeCustomer?
  subscriptions      Subscription[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  User              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  user
  admin
}

enum SubscriptionType {
  free
  individual
  education
}

enum SubscriptionStatus {
  active
  past_due
  canceled
  incomplete
  incomplete_expired
  unpaid
  trialing
}

model StripeCustomer {
  id              String   @id @default(cuid())
  userId          String   @unique
  stripeCustomerId String  @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Subscription {
  id                 String             @id @default(cuid())
  userId             String
  stripeSubscriptionId String            @unique
  status             SubscriptionStatus
  subscriptionType   SubscriptionType
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean            @default(false)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Allowlist {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
